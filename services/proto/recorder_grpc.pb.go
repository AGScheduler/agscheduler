// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: recorder.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Recorder_GetRecords_FullMethodName       = "/services.Recorder/GetRecords"
	Recorder_GetAllRecords_FullMethodName    = "/services.Recorder/GetAllRecords"
	Recorder_DeleteRecords_FullMethodName    = "/services.Recorder/DeleteRecords"
	Recorder_DeleteAllRecords_FullMethodName = "/services.Recorder/DeleteAllRecords"
)

// RecorderClient is the client API for Recorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecorderClient interface {
	GetRecords(ctx context.Context, in *RecordsReq, opts ...grpc.CallOption) (*RecordsResp, error)
	GetAllRecords(ctx context.Context, in *RecordsAllReq, opts ...grpc.CallOption) (*RecordsResp, error)
	DeleteRecords(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAllRecords(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type recorderClient struct {
	cc grpc.ClientConnInterface
}

func NewRecorderClient(cc grpc.ClientConnInterface) RecorderClient {
	return &recorderClient{cc}
}

func (c *recorderClient) GetRecords(ctx context.Context, in *RecordsReq, opts ...grpc.CallOption) (*RecordsResp, error) {
	out := new(RecordsResp)
	err := c.cc.Invoke(ctx, Recorder_GetRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) GetAllRecords(ctx context.Context, in *RecordsAllReq, opts ...grpc.CallOption) (*RecordsResp, error) {
	out := new(RecordsResp)
	err := c.cc.Invoke(ctx, Recorder_GetAllRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) DeleteRecords(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Recorder_DeleteRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) DeleteAllRecords(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Recorder_DeleteAllRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecorderServer is the server API for Recorder service.
// All implementations must embed UnimplementedRecorderServer
// for forward compatibility
type RecorderServer interface {
	GetRecords(context.Context, *RecordsReq) (*RecordsResp, error)
	GetAllRecords(context.Context, *RecordsAllReq) (*RecordsResp, error)
	DeleteRecords(context.Context, *JobReq) (*emptypb.Empty, error)
	DeleteAllRecords(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedRecorderServer()
}

// UnimplementedRecorderServer must be embedded to have forward compatible implementations.
type UnimplementedRecorderServer struct {
}

func (UnimplementedRecorderServer) GetRecords(context.Context, *RecordsReq) (*RecordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecords not implemented")
}
func (UnimplementedRecorderServer) GetAllRecords(context.Context, *RecordsAllReq) (*RecordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRecords not implemented")
}
func (UnimplementedRecorderServer) DeleteRecords(context.Context, *JobReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecords not implemented")
}
func (UnimplementedRecorderServer) DeleteAllRecords(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllRecords not implemented")
}
func (UnimplementedRecorderServer) mustEmbedUnimplementedRecorderServer() {}

// UnsafeRecorderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecorderServer will
// result in compilation errors.
type UnsafeRecorderServer interface {
	mustEmbedUnimplementedRecorderServer()
}

func RegisterRecorderServer(s grpc.ServiceRegistrar, srv RecorderServer) {
	s.RegisterService(&Recorder_ServiceDesc, srv)
}

func _Recorder_GetRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).GetRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recorder_GetRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).GetRecords(ctx, req.(*RecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_GetAllRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordsAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).GetAllRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recorder_GetAllRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).GetAllRecords(ctx, req.(*RecordsAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_DeleteRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).DeleteRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recorder_DeleteRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).DeleteRecords(ctx, req.(*JobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_DeleteAllRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).DeleteAllRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recorder_DeleteAllRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).DeleteAllRecords(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Recorder_ServiceDesc is the grpc.ServiceDesc for Recorder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recorder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.Recorder",
	HandlerType: (*RecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecords",
			Handler:    _Recorder_GetRecords_Handler,
		},
		{
			MethodName: "GetAllRecords",
			Handler:    _Recorder_GetAllRecords_Handler,
		},
		{
			MethodName: "DeleteRecords",
			Handler:    _Recorder_DeleteRecords_Handler,
		},
		{
			MethodName: "DeleteAllRecords",
			Handler:    _Recorder_DeleteAllRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recorder.proto",
}
